/// Used for version check
Class %ZPIP.zpip
{

ClassMethod Shell(pArgs)
{
    #; Gets the install directory
    Set InstallDir = $SYSTEM.Util.InstallDirectory()
    Set pythonbin = ##class(%File).Construct(InstallDir,"bin","irispython")
  
    #; pip3 install <packages>

    Do cmd^Zpipe(pythonbin _ " -m pip " _ pArgs)
}

ClassMethod InvokeSafe(){
    // TODO Implement so that we don't allow command injection in ZPIP
}

ClassMethod UpdateLanguageExtensionsOne(RoutineName As %String, pTestOnly As %Boolean = 0, Output pFound As %Boolean = 0, ByRef tGenLines) As %Status
{
	#def1arg STARTTAGQ " ;Generated by %ZPIP.zpip: Start"
	#def1arg ENDTAGQ " ;Generated by %ZPIP.zpip: End"
	#def1arg STARTTAG ##Expression($$$STARTTAGQ)
	#def1arg ENDTAG ##Expression($$$ENDTAGQ)
	Set tRtn = ##class(%Routine).%New(RoutineName)
	If ##class(%Routine).Exists(RoutineName) {
    Set tEnded = 1
    While 'tRtn.AtEnd {
      Set tLine = tRtn.ReadLine()
      If (tLine = $$$STARTTAGQ) {
        // Read through the ending tag.
        While ('tRtn.AtEnd) && (tRtn.ReadLine() '= $$$ENDTAGQ) {}
        
        // Generate the lines.
        Set pFound = 1
        For i=1:1:tGenLines {
          Set tRtnLines($INCREMENT(tRtnLines)) = tGenLines(i)
        }
      } Else {
        // Before %ZLANGC00 was generated: there's an old version with ZPM defined.
        Set tIsZPM = ($ZCONVERT($EXTRACT(tLine,1,4),"U") = "ZPIP(")
        If tIsZPM {
          Set pFound = 1
          Set tEnded = 0
          Set tRtnLines($INCREMENT(tRtnLines)) = $$$STARTTAGQ
        }
        If '(tIsZPM || tEnded) {
          If ($ZSTRIP($EXTRACT(tLine),"*W") '= "") {
            Set tRtnLines($INCREMENT(tRtnLines)) = $$$ENDTAGQ
            Set tEnded = 1
          }
        }
        Set tRtnLines($INCREMENT(tRtnLines)) = tLine
      }
    }
    If 'tEnded {
      Set tRtnLines($INCREMENT(tRtnLines)) = $$$ENDTAGQ
    } ElseIf 'pFound {
      For i=1:1:tGenLines {
        Set tRtnLines($INCREMENT(tRtnLines)) = tGenLines(i)
      }
    }
  } Else {
    Merge tRtnLines = tGenLines
  }
  If (pTestOnly) {
    Quit
  }
  Do tRtn.Clear()
  For i=1:1:tRtnLines {
    Do tRtn.WriteLine(tRtnLines(i))
  }
  $$$ThrowOnError(tRtn.Save())
  $$$ThrowOnError(tRtn.Compile("/keepsource"))
	Quit $$$OK
}

ClassMethod UpdateLanguageExtensions(pVerbose As %Boolean = 0, pTestOnly As %Boolean = 0, Output pFound As %Boolean = 0) As %Status
{
	#def1arg STARTTAGQ " ;Generated by %ZPIP.zpip: Start"
	#def1arg ENDTAGQ " ;Generated by %ZPIP.zpip: End"
	#def1arg STARTTAG ##Expression($$$STARTTAGQ)
	#def1arg ENDTAG ##Expression($$$ENDTAGQ)

	Set tSC = $$$OK
	Set tInitTLevel = $TLEVEL
	Try {
		Tstart
		// Get routine lines to generate
		Set tOffset = 0
		Set tStarted = 0
		For {
			Set tLineName = "zUpdateLanguageExtensions"_"+"_$INCREMENT(tOffset)_"^"_$ZNAME
			Set tExtLine = $TEXT(@(tLineName))
			If (tExtLine=$$$STARTTAGQ) {
				Set tStarted = 1
			}
			If (tStarted) {
				Set tGenLines($INCREMENT(tGenLines)) = tExtLine
			}
			Quit:(tExtLine=$$$ENDTAGQ)
			Quit:(tExtLine="")
		}

		If '$DATA(tGenLines) {
			$$$ThrowStatus($$$ERROR($$$GeneralError,"Could not find %ZLANGC00 routine contents in "_$CLASSNAME()))
		}
		Do ..UpdateLanguageExtensionsOne("%ZLANGC00.MAC", pTestOnly,.pFound,.tGenLines)
		Quit:pTestOnly
		Set i="" 
		For { Set i=$ORDER(tGenLines(i),1,tStr) Quit:i=""
			If tStr[" Do ##class" Set tGenLines(i)=$REPLACE($REPLACE(tStr," Quit","")," Do "," Quit ") Quit
		}
		Do ..UpdateLanguageExtensionsOne("%ZLANGF00.MAC", pTestOnly,.pFound,.tGenLines)
		Tcommit
	} Catch e {
		Set tSC = e.AsStatus()
	}
	While ($TLEVEL > tInitTLevel) {
		Trollback 1
	}
	Quit tSC
#; These are the actual contents of %ZLANGC00 (to be added/updated)
$$$STARTTAG
ZPIP(pArgs) Do ##class(%ZPIP.zpip).Shell(pArgs) Quit
$$$ENDTAG
#; Need an extra line down here to avoid the end bracket being on the same line as $$$ENDTAG - a comment is just fine.
}
ClassMethod PrintMessage()
{
    W !
    W !, "   _________ ___ ____  "
    W !, "  |__  /  _ \_ _|  _ \ "
    W !, "    / /| |_) | || |_) |"
    W !, "   / /_|  __/| ||  __/ "
    W !, "  /____|_|  |___|_|    "           
    W !
    W !, "  NAME"
    W !, "      zpip, a python pip wrapper"
    W !
    W !, "  SYNOPSIS"
    W !, "      zpip "" [pip command] """
    W !
    W !, "  DESCRIPTION"
    W !, "      zpip can be used like the python pip package but from the"
    W !, "      InterSystems terminal. Use just like any other pip command"
    W !, "      but wrap your command with double-quotes. Usable in terminal"
    W !, "      and in objectscript code"
    W !
    W !, "  EXAMPLES", !
    W !, "      install 1 package (requests): "
    W !
    W !, "          NS> zpip ""install requests"""
    W !
    W !, "      install multiple packages (requests twilio bs4)"
    W !
    W !, "          NS> zpip ""install twilio bs4"""
    W !
    W !, "      install with target directory (numpy)"
    W !
    W !, "          NS> zpip ""install --target '/usr/irissys/lib/python' numpy"""
    W !,!
}

}
